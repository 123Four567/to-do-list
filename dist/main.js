(()=>{"use strict";var e={d:(t,n)=>{for(var r in n)e.o(n,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:n[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t),e.d(t,{IK:()=>n,eD:()=>s});class n{constructor(e){this.name=e,this.taskList=[]}addTask(e){this.taskList.push(e)}getTasks(){return this.taskList}}class r{constructor(e,t,n){this.name=e,this.date=t,this.description=n}getName(){return this.name}getDate(){return this.date}getDescription(){return this.description}}const s={getProject:function(e,t){return e.find((e=>e.name==t))},submitTask:function(e){const t=document.querySelector(".task-form"),n=document.querySelector("#input-task-name").value,s=document.querySelector("#input-task-date").value,o=document.querySelector("#input-task-description").value,a=new r(n,s,o);t.reset(),e.addTask(a)},deleteTask:function(e){const t=document.querySelectorAll(".delete-task");Array.from(t).forEach((t=>{t.addEventListener("click",(t=>{e.getTasks().splice(t.target.parentElement.dataset.id,1)}))}))},submitProject:function(e){const t=document.querySelector(".project-form"),r=document.querySelector("#input-project-name").value,s=new n(r);t.reset(),e.push(s)}},o=function(){let e=0;return{renderTasks:function n(r){const s=document.querySelector(".task-view");s.innerHTML="";let o=r.getTasks();const a=document.createElement("h2");a.textContent="Tasks",s.appendChild(a),o.forEach((t=>{const n=document.createElement("div");n.classList.add("task-container"),n.dataset.id=e;const r=document.createElement("div");r.classList.add("show-task-name"),r.textContent=t.name,n.appendChild(r);const o=document.createElement("div");o.classList.add("show-task-date"),o.textContent=t.date,n.appendChild(o);const a=document.createElement("div");o.classList.add("show-task-description"),a.textContent=t.description,n.appendChild(a);const c=document.createElement("button");c.classList.add("delete-task"),c.textContent="Delete",n.appendChild(c),e+=1,s.appendChild(n)})),e=0;const c=document.createElement("button");c.classList.add("new-task"),c.textContent="Create new task",s.appendChild(c),document.querySelectorAll(".delete-task").addEventListener("click",(()=>{t.default.deleteTask(r),n(r)}))},renderProjects:function(e){const t=document.querySelector(".project-nav");t.innerHTML="",e.forEach((e=>{const n=document.createElement("li");n.textContent=e.name,t.appendChild(n)}))}}}();!function(){let e=[new n("default")],t="default";document.querySelector(".submit-task").addEventListener("click",(n=>{n.preventDefault(),s.submitTask(s.getProject(e,t)),o.renderTasks(s.getProject(e,t))})),document.querySelector(".submit-project").addEventListener("click",(n=>{n.preventDefault(),s.submitProject(e),o.renderProjects(e);const r=document.querySelectorAll("li");Array.from(r).forEach((n=>{n.addEventListener("click",(n=>{t=n.target.textContent,o.renderTasks(s.getProject(e,t)),console.log(t)}))}))}))}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,